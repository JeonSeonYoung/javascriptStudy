프로미스 기본 사용

function getData(callback) {
  return new Promise(function (resolve, reject) {
    $.get('localhost/products/1', function (response) {
      resolve(response);
    });
  });
}

getData().then(function (tableData) {
console.log(tableData); // $.get()의 reponse 값이 tableData에 전달됨
});







프로미스 체이닝

new Promise(function(resolve, reject){
  setTimeout(function() {
    resolve(1);
  }, 2000);
})
.then(function(result) {
  console.log(result); // 1
  return result + 10;
})
.then(function(result) {
  console.log(result); // 11
  return result + 20;
})
.then(function(result) {
  console.log(result); // 31
});


결과
1
11
31






프로미스 ALL


var promise1 = new Promise(function (resolve, reject) {

	window.setTimeout(function () {

		console.log("첫번째 Promise 완료");
		resolve("11111");

	}, Math.random() * 20000 + 1000);
});

var promise2 = new Promise(function (resolve, reject) {

	window.setTimeout(function () {

		console.log("두번째 Promise 완료");
		resolve("222222");

	}, Math.random() * 10000 + 1000);
});


Promise.all([promise1, promise2]).then(function (values) {
	console.log("모두 완료됨", values);
});


결과  : 두번째 Promise 완료
        첫번째 Promise 완료
       모두 완료됨 ["11111", "222222"]




프로미스 RACE

var p1 = new Promise(function(resolve, reject) { 
  setTimeout(resolve, 1000, "one"); 
}); 
var p2 = new Promise(function(resolve, reject) { 
  setTimeout(resolve, 2000, "two"); 
});
var p3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 3000, "three");
});
var p4 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 4000, "four");
});
var p5 = new Promise(function(resolve, reject) {
  setTimeout(reject, 5000, "five");
});

Promise.race([p1, p2, p3, p4, p5]).then(function(value) { 
  console.log(value);
}, function(reject) {
  console.log(reject)
});

결과 : one






RACE 와 ALL의 차이

var p1 = new Promise(function(resolve, reject) { 
  setTimeout(resolve, 1000, "one"); 
}); 
var p2 = new Promise(function(resolve, reject) { 
  setTimeout(resolve, 2000, "two"); 
});
var p3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 3000, "three");
});
var p4 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 4000, "four");
});
var p5 = new Promise(function(resolve, reject) {
  setTimeout(reject, 3000, "error");
});

Promise.all([p1, p2, p3, p4, p5]).then(function(value) { 
  console.log(value);
}, function(reason) {
  console.log(reason)
});

결과 : error

var p1 = new Promise(function(resolve, reject) { 
  setTimeout(resolve, 1000, "one"); 
}); 
var p2 = new Promise(function(resolve, reject) { 
  setTimeout(resolve, 2000, "two"); 
});
var p3 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 3000, "three");
});
var p4 = new Promise(function(resolve, reject) {
  setTimeout(resolve, 4000, "four");
});
var p5 = new Promise(function(resolve, reject) {
  setTimeout(reject, 3000, "error");
});

Promise.race([p1, p2, p3, p4, p5]).then(function(value) { 
  console.log(value);
}, function(reason) {
  console.log(reason)
});

결과 : one


ALL은 모든 프로미스가 완료될 때까지 pendding 상태로 기다리기 때문에 중간에 REJECT를 캐치하여 오류를 출력한다. 
반면 RACE의 경우 가장 먼저 응답을 받은 프로미스를 출력 후 다음 프로세스로 넘어가기 때문에 에러를 캐치하지 못함.








오류처리


오류처리 방법 두가지 

function getData() {
  return new Promise(function (resolve, reject) {
    reject('failed');
  });
}

// 1. then()으로 에러를 처리하는 코드
getData().then(function () {
  // ...
}, function (err) {
  console.log(err);
});

// 2. catch()로 에러를 처리하는 코드
getData().then().catch(function (err) {
  console.log(err);
});



오류 


var p1 = new Promise(function(resolve, reject) {
  throw '에러!';
});

p1.catch(function(e) {
  console.log(e); // "에러!"
});


var p2 = new Promise(function(resolve, reject) {
  setTimeout(function() {
    throw 'Uncaught Exception!';
  }, 1000);
});

p2.catch(function(e) {
  console.log(e); // 이는 전혀 호출되지 않음
});




finally 


function getData() {
  return new Promise(function (resolve, reject) {
    reject('failed');
  });
}


// 2. catch()로 에러를 처리하는 코드
getData().then().catch(function (err) {
  console.log(err);
}).finally(function(){console.log("마지막 필수로 체크")});




